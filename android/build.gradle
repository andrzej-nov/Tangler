//file:noinspection LongLine
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.andrzejn.tangler'
    compileSdk 34
    defaultConfig {
        applicationId 'com.andrzejn.tangler'
        minSdk 19
        targetSdk 34
        versionCode 17
        versionName '1.15'
        multiDexEnabled true
    }
    compileOptions {
        // Android versions prior to 12.0 (SDK level 32) do not support Java versions over 1.8
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = 1.8
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
/*        debug { // Used to find out which classes have been erroneously stripped out by proguard.
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }*/
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
            aidl.srcDirs = ['src/main/java', 'src/main/kotlin']
            renderscript.srcDirs = ['src/main/java', 'src/main/kotlin']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml', 'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES', 'META-INF/dependencies.txt']
            pickFirsts += ['META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/license.txt', 'META-INF/LGPL2.1', 'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/notice.txt']
        }
    }
    buildFeatures {
        renderScript true
        aidl true
    }
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file('libs/armeabi-v7a/').mkdirs()
        file('libs/arm64-v8a/').mkdirs()
        file('libs/x86_64/').mkdirs()
        file('libs/x86/').mkdirs()

        configurations.getByName('natives').copy().files.each { final jar ->
            def outputDir = null
            if (jar.name.endsWith('natives-armeabi-v7a.jar')) outputDir = file('libs/armeabi-v7a')
            if (jar.name.endsWith('natives-arm64-v8a.jar')) outputDir = file('libs/arm64-v8a')
            if (jar.name.endsWith('natives-x86_64.jar')) outputDir = file('libs/x86_64')
            if (jar.name.endsWith('natives-x86.jar')) outputDir = file('libs/x86')
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include '*.so'
                }
            }
        }
    }
}

tasks.configureEach { final packageTask ->
    if (packageTask.name.contains('package')) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

tasks.register('run', Exec) {
    def path
    final def localProperties = project.file('../local.properties')
    if (localProperties.exists()) {
        final Properties properties = new Properties()
        localProperties.withInputStream { final instr ->
            properties.load(instr)
        }
        final def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    final def adb = path + '/platform-tools/adb'
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.andrzejn.tangler/com.andrzejn.tangler.AndroidLauncher'
}

eclipse.project.name = appName + '-android'
